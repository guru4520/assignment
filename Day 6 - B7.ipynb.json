{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Q. For this challenge,create a bank account class that has two attributes\n",
    "*ownerName\n",
    "*Balance\n",
    "And two methods\n",
    "*deposit\n",
    "*withdraw\n",
    "As an added requirement,withdrawals may not exceed the available balance.\n",
    "Instantiate your class,make several deposits and withdrawals,and test to make sure the account\n",
    "cant be overdrawn."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "class bankacc():\n",
    "    def __init__(self,ownernm,balance):\n",
    "        self.ownernm = ownernm \n",
    "        self.balance = balance\n",
    "        print(\"Your account is created.\")\n",
    "    def deposit(self):\n",
    "        print(\"Bank Account Holder Name : \",self.ownernm)\n",
    "        print(\"Your current balance : \",self.balance)\n",
    "        amt = int(input(\"Enter the amount to deposit : \"))\n",
    "        self.balance += amt \n",
    "        print(\"Your new balance : \",self.balance)\n",
    "    def withdraw(self):\n",
    "        print(\"Bank Account Holder Name : \",self.ownernm)\n",
    "        print(\"Your current balance : \",self.balance)\n",
    "        amt = int(input(\"Enter the amount to be withdraw : \"))\n",
    "        if amt > self.balance:\n",
    "            print(\"Insufficient Balance!\")\n",
    "        else:\n",
    "            self.balance -= amt\n",
    "            print(\"Your remaining balance : \",self.balance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your account is created.\n",
      "Bank Account Holder Name :  Guruprasad Patil\n",
      "Your current balance :  5000\n",
      "Enter the amount to deposit : 7000\n",
      "Your new balance :  12000\n",
      "Bank Account Holder Name :  Guruprasad Patil\n",
      "Your current balance :  12000\n",
      "Enter the amount to be withdraw : 5000\n",
      "Your remaining balance :  7000\n"
     ]
    }
   ],
   "source": [
    "acc = bankacc(\"Guruprasad Patil\",5000)\n",
    "acc.deposit()\n",
    "acc.withdraw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "class bankacc():\n",
    "    def __init__(self,ownernm,balance):\n",
    "        self.ownernm = ownernm \n",
    "        self.balance = balance\n",
    "        print(\"Your account is created.\")\n",
    "    def deposit(self):\n",
    "        print(\"Bank Account Holder Name : \",self.ownernm)\n",
    "        print(\"Your current balance : \",self.balance)\n",
    "        amt = int(input(\"Enter the amount to deposit : \"))\n",
    "        self.balance += amt \n",
    "        print(\"Your new balance : \",self.balance)\n",
    "    def withdraw(self):\n",
    "        print(\"Bank Account Holder Name : \",self.ownernm)\n",
    "        print(\"Your current balance : \",self.balance)\n",
    "        amt = int(input(\"Enter the amount to be withdraw : \"))\n",
    "        if amt > self.balance:\n",
    "            print(\"Insufficient Balance!\")\n",
    "        else:\n",
    "            self.balance -= amt\n",
    "            print(\"Your remaining balance : \",self.balance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your account is created.\n",
      "Bank Account Holder Name :  Omkar Patil\n",
      "Your current balance :  10000\n",
      "Enter the amount to deposit : 5000\n",
      "Your new balance :  15000\n",
      "Bank Account Holder Name :  Omkar Patil\n",
      "Your current balance :  15000\n",
      "Enter the amount to be withdraw : 7000\n",
      "Your remaining balance :  8000\n"
     ]
    }
   ],
   "source": [
    "acc = bankacc(\"Omkar Patil\",10000)\n",
    "acc.deposit()\n",
    "acc.withdraw()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Q. For this challenge,create a cone class that has two attributes:\n",
    "*R=Radius\n",
    "*h=Height\n",
    "And two methods:\n",
    "*Volume = Π * r2 *(h/3)\n",
    "*Surface area : base : Π * r2 , side : Π * r * √(r2 + h2)\n",
    "Make only one class with functions,as in where required import Math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "class conearea():\n",
    "    def __init__(self,r,h):\n",
    "        self.r = r\n",
    "        self.h = h\n",
    "    def volume(self):\n",
    "        volume = (1 / 3) * math.pi * self.r * self.r * self.h\n",
    "        print(\"Volume of a cone : \",volume)\n",
    "    def surarea(self):\n",
    "        base = math.pi * self.r *self.r\n",
    "        print(\"base : \",base)\n",
    "        side = math.pi * self.r * math.sqrt(self.r * self.r + self.h * self.h)\n",
    "        print(\"side : \",side)\n",
    "        surface = base + side\n",
    "        print(\"Surface area of a cone : \",surface)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Volume of a cone :  523.5987755982989\n",
      "base :  314.1592653589793\n",
      "side :  351.2407365520363\n",
      "Surface area of a cone :  665.4000019110156\n"
     ]
    }
   ],
   "source": [
    "area = conearea(10,5)\n",
    "area.volume()\n",
    "area.surarea()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
