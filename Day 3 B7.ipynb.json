{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# You all are pilots, you want to land a plane safely, so altitude \n",
    "#required for landing a plane is 1000 ft, it is less than tell \n",
    "#pilot to land the plane or it is more than 1000ft but \n",
    "#less than 5000ft ask the pilot to come down to 1000ft, \n",
    "#else if it more than 5000ft ask the pilot to go around and try later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a altitude : ft2500\n",
      "Come down to 1000ft.\n"
     ]
    }
   ],
   "source": [
    "alt = input(\"Enter a altitude : ft\")\n",
    "alt = int(alt)\n",
    "if (alt <= 1000):\n",
    "    print(\"Land the plane.\")\n",
    "elif (alt > 1000) and (alt <= 5000):\n",
    "    print(\"Come down to 1000ft.\")\n",
    "else:\n",
    "    print(\"Go around and try later.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a altitude : ft500\n",
      "Land the plane.\n"
     ]
    }
   ],
   "source": [
    "alt = input(\"Enter a altitude : ft\")\n",
    "alt = int(alt)\n",
    "if (alt <= 1000):\n",
    "    print(\"Land the plane.\")\n",
    "elif (alt > 1000) and (alt <= 5000):\n",
    "    print(\"Come down to 1000ft.\")\n",
    "else:\n",
    "    print(\"Go around and try later.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a altitude : ft6000\n",
      "Go around and try later.\n"
     ]
    }
   ],
   "source": [
    "alt = input(\"Enter a altitude : ft\")\n",
    "alt = int(alt)\n",
    "if (alt <= 1000):\n",
    "    print(\"Land the plane.\")\n",
    "elif (alt > 1000) and (alt <= 5000):\n",
    "    print(\"Come down to 1000ft.\")\n",
    "else:\n",
    "    print(\"Go around and try later.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Using for loop print all the prime numbers between 1-200 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prime number between 1-200 : \n",
      "2\n",
      "3\n",
      "5\n",
      "7\n",
      "11\n",
      "13\n",
      "17\n",
      "19\n",
      "23\n",
      "29\n",
      "31\n",
      "37\n",
      "41\n",
      "43\n",
      "47\n",
      "53\n",
      "59\n",
      "61\n",
      "67\n",
      "71\n",
      "73\n",
      "79\n",
      "83\n",
      "89\n",
      "97\n",
      "101\n",
      "103\n",
      "107\n",
      "109\n",
      "113\n",
      "127\n",
      "131\n",
      "137\n",
      "139\n",
      "149\n",
      "151\n",
      "157\n",
      "163\n",
      "167\n",
      "173\n",
      "179\n",
      "181\n",
      "191\n",
      "193\n",
      "197\n",
      "199\n"
     ]
    }
   ],
   "source": [
    "print(\"Prime number between 1-200 : \")\n",
    "for prm in range(1,201):\n",
    "    if prm > 1:\n",
    "        for i in range(2,prm):\n",
    "            if (prm % i) == 0:\n",
    "                break\n",
    "        else:\n",
    "                print(prm)\n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
